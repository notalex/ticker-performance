// Generated by CoffeeScript 1.3.3
(function() {
  var ContextCreator, elementsList;

  elementsList = getElementsList();

  ContextCreator = (function() {
    var addMissingAttributes, defaultColor, defaultText, imagePosition, intermediateSpace, textPosition;

    defaultColor = 'black';

    intermediateSpace = 3;

    textPosition = {
      y: 18
    };

    imagePosition = {
      y: 5
    };

    defaultText = function() {
      return {
        fontColor: 'black'
      };
    };

    addMissingAttributes = function(customText) {
      var key, text, value;
      text = defaultText();
      for (key in customText) {
        value = customText[key];
        text[key] = value;
      }
      return text;
    };

    function ContextCreator(id, initialPosition) {
      if (initialPosition == null) {
        initialPosition = 5;
      }
      this.canvas = document.getElementById(id);
      this.context = this.canvas.getContext('2d');
      this.context.font = '15px Arial';
      this.position = initialPosition;
    }

    ContextCreator.prototype.incrementPosition = function(object) {
      return this.position += object.width + intermediateSpace;
    };

    ContextCreator.prototype.fillText = function(customText) {
      var metrics, text;
      text = addMissingAttributes(customText);
      this.context.fillStyle = text.fontColor;
      this.context.fillText(text.value, this.position, textPosition.y);
      metrics = this.context.measureText(text.value);
      return this.incrementPosition(metrics);
    };

    ContextCreator.prototype.addUnicode = function(unicode) {
      this.context.fillStyle = 'darkBlue';
      this.context.fillText(unicode, this.position, textPosition.y);
      return this.incrementPosition({
        width: 13
      });
    };

    return ContextCreator;

  })();

  $(function() {
    var addElements, addMoreElements, addSecondaryData, animate, canvas, changeSecondaryToPrimary, context, currentPosition, delayedAnimation, hiddenContext, index, primaryBlockWidth, primaryImageData, secondaryBlockWidth, secondaryImageData, startPosition, toggleTicker, wrappedContext;
    index = 0;
    startPosition = 100;
    wrappedContext = new ContextCreator('ticker-using-hidden-canvas-image', startPosition);
    context = wrappedContext.context;
    canvas = wrappedContext.canvas;
    currentPosition = startPosition;
    toggleTicker = false;
    secondaryImageData = '';
    addSecondaryData = true;
    hiddenContext = new ContextCreator('hidden-canvas', 0);
    addElements = function() {
      var element, _results;
      _results = [];
      while (hiddenContext.position < (hiddenContext.canvas.width - 100)) {
        element = elementsList.shift();
        hiddenContext.fillText({
          value: element.value1
        });
        hiddenContext.addUnicode(element.unicode);
        hiddenContext.fillText({
          value: element.value2,
          fontColor: 'red'
        });
        hiddenContext.fillText({
          value: element.value3,
          fontColor: 'darkRed'
        });
        _results.push(hiddenContext.position += 5);
      }
      return _results;
    };
    addElements();
    primaryBlockWidth = hiddenContext.position;
    secondaryBlockWidth = hiddenContext.position;
    primaryImageData = hiddenContext.context.getImageData(0, 0, primaryBlockWidth, canvas.height);
    addMoreElements = function() {
      if (addSecondaryData) {
        hiddenContext.context.clearRect(0, 0, hiddenContext.canvas.width, canvas.height);
        hiddenContext.position = 0;
        addElements();
        secondaryBlockWidth = hiddenContext.position;
        secondaryImageData = hiddenContext.context.getImageData(0, 0, secondaryBlockWidth, canvas.height);
        return addSecondaryData = false;
      }
    };
    changeSecondaryToPrimary = function() {
      primaryImageData = secondaryImageData;
      return primaryBlockWidth = secondaryBlockWidth;
    };
    animate = function() {
      if (toggleTicker) {
        currentPosition -= 1;
        wrappedContext.context.clearRect(0, 0, canvas.width, canvas.height);
        context.putImageData(primaryImageData, currentPosition, 0);
        if ((currentPosition + primaryBlockWidth) < canvas.width) {
          addMoreElements();
          context.putImageData(secondaryImageData, currentPosition + primaryBlockWidth, 0);
        }
        if (currentPosition < -primaryBlockWidth) {
          currentPosition += primaryBlockWidth;
          changeSecondaryToPrimary();
          return addSecondaryData = true;
        }
      }
    };
    delayedAnimation = function() {
      return setInterval(animate, 33);
    };
    setTimeout(delayedAnimation, 1000);
    return $('.ticker-using-hidden-canvas-image').find('button').click(function() {
      return toggleTicker = !toggleTicker;
    });
  });

}).call(this);
